let VS const:-
--------------

*let and const are block scope, which means any time you’ve got a set of curly brackets you have block scope.
- you can only declare a variable inside of its scope once.

const key = 'abc123';
let points = 50;
let winner = false;

If I try to update points by re-declaring the let variable:
JavaScript it'll not  works cuz it's in the same scope.

let points = 60;
--ERROR--
but if you try to decleare it in another scope it will wokrs fine like :-

	const key = 'abc123';
	let points = 50;
	let winner = false;

	if(points > 40) {
	   let winner = true;
	}
if i console.log(winner);   // it will still false;
-> false
--------------------------------------------------

***One other quick thing is that sometimes people think that const means it’s immutable, which means that if I have an object…

const person = {
 	name: 'Wes',
 	age: 28
}
…and if I try to update something in the const object by typing person = { name: 'Wesley' } it won’t allow me to do that.
However, the properties of a const variable can change. That’s because the entire object is not immutable. It just can’t be reassigned entirely.

The way I like to think about it with an object is that the person is me. I’m not going to ever change, my entire life, but attributes about me are going to change.

Maybe my age, my hair color, where I live — things about me — are going to change. That’s fine, as long as the object that is assigned to Wes is always the exact same object, I can go ahead and set a new age:

const person = {
  name: 'Wes',
  age: 28
}
----
person.age = 29;
person.name = 'ali';
----
console.log(person);

-> person{
	name:'ali',
	age:29
}
---------------------------------------------------------------------
**
--If you do need to freeze everything, we have something called Object.freeze. It’s actually not part of ES6:-
**

-So we can use it on our object:-

const ali = Object.freeze(person);
in this way it will never declare again

